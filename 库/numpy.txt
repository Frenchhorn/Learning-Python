import numpy as np

数组
# 生成数组
a = array([[1,2,3],[4,5,6],[7,8,9]])

# 生成一维数组
a = np.linespace(0, 2, 9)
a = np.arange(20)   # 0-19的一维数组
_ = np.arange([1,2,3,4])  # 或者通过列表转换

# 构造成数组
b = a.reshape(4, 5)     # 二维数组
c = a.reshape(2, 2, 5)  # 三维数组

# 生成全0数组
d = np.zeros((4, 5))  # 二维数组
# 默认为float，可以通过dtype=int指定类型

# [0, 1)区间的随机数组
e = np.random.rand(4, 5)  # 二维数组

# 数组的属性
b.ndim      # 维度
c.shape     # 各维度大小
b.size      # 全部元素个数
c.dtype     # 元素类型

# 取值
a = np.arange(20).reshape(4, 5)
a[0]    # 取第1个元素
a[0][1] # 取第1个元素中的第2个元素
a[0, 1] # 取第1个元素中的第2个元素
a[:, 1] # 取全部元素中的第2个元素
a[1:3, 2] # 一维取1:3, 二维取2
a[:][a > 5] # 第二维中元素大于5

# 搜索
a = 
array([[ 0,  1,  2,  3,  5],
       [ 5,  6,  7,  8,  9],
       [10, 11, 12, 13, 14],
       [15, 16, 17, 18, 19]])
loc = np.where(a==5)
返回
(array([0, 1], dtype=int32), array([4, 0], dtype=int32))
即[0, 4]处和[1, 0]处

# 运算
a:
[[ 1.  2.]
 [ 2.  4.]]
# 数组间/数组与数字间的运算包括
+, -, *, /, 
+=, -=, *=, /=, 
np.exp(a), np.sqrt(a), np.power(a, n)

# 数组的方法
a.sum()     # 求和
a.max()     # 最大值
a.min()     # 最小值

# 数组拼接
a = np.array((1,2,3))
b = np.array((2,3,4))
print np.column_stack((a,b))
[[1 2]
 [2 3]
 [3 4]]
 
a = np.random.rand(2,2)
b = np.random.rand(2,2)
c = np.hstack([a,b])
d = np.vstack([a,b])

a:
[[ 0.6738195   0.4944045 ]
 [ 0.25702675  0.15422012]]
b:
[[ 0.6738195   0.4944045 ]
 [ 0.25702675  0.15422012]]
horizontal stacking a and b:
[[ 0.6738195   0.4944045   0.28058267  0.0967197 ]
 [ 0.25702675  0.15422012  0.55191041  0.04694485]]
vertical stacking a and b:
[[ 0.6738195   0.4944045 ]
 [ 0.25702675  0.15422012]
 [ 0.28058267  0.0967197 ]
 [ 0.55191041  0.04694485]]

# 转置
a = np.random.rand(2, 4)
b = np.transpose(a)


矩阵
# 生成矩阵
a = np.matrix('1 2 3; 4 5 6; 7 8 9')
# 转换为矩阵
a = np.range(10)
b = np.mat(a)

# 矩阵运算，安照相关运算法则

# 转置
b.T

# 矩阵求逆
from numpy import linalg as nlg
a = np.random.rand(2, 2)
b = np.mat(a)
c = nlg.inv(b)

# 特征值和特征向量
eig_value, eig_vector = nlg.eig(b)
